/*
   Typical pin layout used:
   -----------------------------------------------------------------------------------------
               MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino
               Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro
   Signal      Pin          Pin           Pin       Pin        Pin              Pin
   -----------------------------------------------------------------------------------------
   RST/Reset   RST          9             5         D9         RESET/ICSP-5     RST
   SPI SS      SDA(SS)      10            53        D10        10               10
   SPI MOSI    MOSI         11 / ICSP-4   51        D11        ICSP-4           16
   SPI MISO    MISO         12 / ICSP-1   50        D12        ICSP-1           14
   SPI SCK     SCK          13 / ICSP-3   52        D13        ICSP-3           15
*/

#include <SPI.h>
#include <MFRC522.h>

#define RST_PIN         9          // Configurable, see typical pin layout above
#define SS_PIN          10         // Configurable, see typical pin layout above

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance

void setup() {
  Serial.begin(9600);    // Initialize serial communications with the PC
  while (!Serial);      // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();          // Init SPI bus
  mfrc522.PCD_Init();   // Init MFRC522
  delay(4);
  mfrc522.PCD_DumpVersionToSerial();  // Show details of PCD - MFRC522 Card Reader details
  Serial.println(F("Arduino Amiibo writer. Put your NFC-tag to the reader"));
}

void loop() {
  // Look for new cards
  if ( ! mfrc522.PICC_IsNewCardPresent()) {
    return;
  }

  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) {
    return;
  }

  // hexdump -v -e " 4/1 \"0x%02X, \" \"\n\"" Chibi-Robo.encoded.bin
  byte pages          = 135;
  byte dataBlock[]    = {

  //    ############################
  //    >>> Paste your dump here <<<
  //    ############################
  
  0x04, 0x77, 0x42, 0xb9,
0x03, 0xeb, 0x1c, 0xd0,
0x24, 0x48, 0x00, 0x00,
0xf1, 0x10, 0xff, 0xee,
0xa5, 0x00, 0x00, 0x00,
0x37, 0x43, 0xee, 0xfc,
0x75, 0x05, 0x10, 0xc3,
0xa9, 0x3f, 0xad, 0xcf,
0x01, 0xf9, 0xaa, 0x07,
0x55, 0xcb, 0x4d, 0x84,
0x7b, 0x49, 0x15, 0x2d,
0xe2, 0xd9, 0x6b, 0x78,
0xa2, 0x4f, 0x12, 0x09,
0x1a, 0xec, 0xc9, 0xc7,
0x30, 0x54, 0x76, 0xe0,
0xf6, 0x56, 0x14, 0x13,
0xe4, 0x8d, 0x14, 0x0f,
0x58, 0x90, 0x97, 0x69,
0xf2, 0xcb, 0x0b, 0x6e,
0x45, 0x5d, 0xdd, 0x11,
0xe3, 0xd8, 0xa1, 0x57,
0x0a, 0x0f, 0x00, 0x01,
0x03, 0xc6, 0x05, 0x02,
0x38, 0x39, 0x39, 0x31,
0x60, 0x31, 0x65, 0x63,
0x90, 0xee, 0xea, 0x78,
0xb3, 0x91, 0x9a, 0xed,
0xdf, 0xe1, 0xa3, 0x1c,
0x40, 0x33, 0x7f, 0xc7,
0xfb, 0xf5, 0x8b, 0x7f,
0x8c, 0xbe, 0x25, 0x08,
0x52, 0x11, 0xaa, 0x32,
0xd8, 0x53, 0x95, 0x60,
0x12, 0xfc, 0xaf, 0x41,
0x9f, 0x09, 0x98, 0x56,
0xf7, 0x00, 0xba, 0x38,
0x1f, 0x63, 0x6e, 0x7c,
0x58, 0x2b, 0x97, 0xe8,
0xd2, 0x3d, 0x0f, 0x1a,
0xef, 0xcf, 0xd9, 0x16,
0x75, 0xb8, 0x44, 0xfe,
0xc0, 0x63, 0xb1, 0xe4,
0x8b, 0x5e, 0xc0, 0x3e,
0x9b, 0x35, 0xad, 0x7f,
0x0b, 0x14, 0xe4, 0x91,
0x3c, 0x62, 0x0a, 0xef,
0x87, 0x06, 0xdc, 0x2a,
0x58, 0xd2, 0xd0, 0x1c,
0x1b, 0x10, 0xb2, 0x56,
0xe1, 0x5c, 0x13, 0xcb,
0x59, 0xab, 0xcd, 0x1e,
0x89, 0x05, 0x94, 0xdc,
0x9b, 0x96, 0x27, 0xa6,
0xc8, 0xa0, 0xd5, 0xf0,
0x74, 0x82, 0xd1, 0x98,
0x4e, 0xea, 0xde, 0x97,
0xb2, 0xd3, 0x66, 0x0c,
0x1e, 0x37, 0xe0, 0xca,
0xb2, 0x98, 0x3b, 0x82,
0x45, 0x3a, 0x09, 0x36,
0xab, 0x13, 0x1d, 0x8b,
0x99, 0x6c, 0x1d, 0xd3,
0xb4, 0x4c, 0x7b, 0x7f,
0x25, 0x7f, 0x1b, 0xd8,
0xec, 0xe4, 0x5b, 0xf3,
0x0d, 0x15, 0xaf, 0xa4,
0x95, 0xd1, 0x53, 0x08,
0xdd, 0xde, 0x3c, 0xe8,
0xb4, 0xcc, 0x1c, 0x02,
0xf6, 0x91, 0x7e, 0xfd,
0xb7, 0x62, 0x9c, 0xa1,
0xb4, 0x21, 0xa0, 0xab,
0xb4, 0x11, 0x29, 0x4d,
0x4a, 0xfc, 0x0f, 0x77,
0xf9, 0xc1, 0xb4, 0x5d,
0x39, 0x11, 0x42, 0x07,
0xd5, 0x95, 0x05, 0x54,
0x26, 0x81, 0x5f, 0xd3,
0xa8, 0x40, 0x95, 0xc2,
0xe4, 0xff, 0x0a, 0x4d,
0x71, 0xa0, 0x64, 0x5e,
0x87, 0x82, 0xa7, 0x43,
0x88, 0x51, 0x27, 0x68,
0xc3, 0x18, 0x59, 0x0e,
0x7f, 0xe9, 0xdc, 0xb8,
0x1f, 0x72, 0xd2, 0xd6,
0x4c, 0x48, 0x23, 0x55,
0x78, 0xb2, 0x60, 0xd7,
0xf0, 0xcc, 0xe1, 0x34,
0xf4, 0xdc, 0x7a, 0xae,
0xeb, 0x92, 0x84, 0x0a,
0xb2, 0xea, 0x83, 0xc6,
0xc0, 0xd6, 0xf3, 0xca,
0xbc, 0xf5, 0x57, 0xa4,
0xeb, 0xf3, 0xfb, 0xfe,
0x3d, 0x6c, 0xdd, 0x58,
0x65, 0x23, 0xef, 0x5e,
0xf6, 0xe5, 0xc0, 0x9e,
0x43, 0x37, 0x79, 0x1d,
0x4e, 0x94, 0x6c, 0x0c,
0x51, 0x44, 0x08, 0xbb,
0x29, 0x07, 0xe7, 0x8a,
0xc8, 0x2f, 0x0c, 0xe1,
0x20, 0x76, 0x37, 0x1b,
0x4b, 0xc3, 0xdd, 0xbf,
0xc7, 0xc2, 0xe0, 0x0f,
0xf8, 0x52, 0x5e, 0x29,
0x54, 0x1f, 0xbf, 0xa9,
0x52, 0xc5, 0x48, 0xc1,
0x9b, 0xbf, 0xe7, 0xb1,
0x61, 0x18, 0x67, 0x67,
0x24, 0xf2, 0x45, 0xb6,
0xb5, 0x67, 0x00, 0xb1,
0x9f, 0xc9, 0xf8, 0x33,
0x10, 0xf7, 0x70, 0xb7,
0x5c, 0xdc, 0x0c, 0x75,
0x4f, 0x39, 0xb7, 0x8b,
0x82, 0x2a, 0x7c, 0x4f,
0xbf, 0x49, 0xfe, 0x5b,
0xcc, 0x21, 0x77, 0x4a,
0xf3, 0xa2, 0xfd, 0xc7,
0x7a, 0x25, 0x85, 0x6f,
0x15, 0x8f, 0x99, 0xa1,
0x32, 0xa8, 0x3b, 0x0a,
0x68, 0xf4, 0x75, 0xb0,
0x81, 0xc4, 0x2d, 0x98,
0xd7, 0x93, 0x04, 0x9e,
0x23, 0x73, 0x96, 0xed,
0x1b, 0x73, 0xff, 0xc4,
0xac, 0xd0, 0x7d, 0xd9,
0x00, 0x00, 0x00, 0xbd,
0x00, 0x00, 0x00, 0x04,
0x5f, 0x00, 0x00, 0x00,
0xde, 0xfc, 0xb5, 0x6e,
0x80, 0x80, 0x00, 0x00

  };

  MFRC522::StatusCode status;

  // Write main data
  for (byte page = 3; page < pages; page++) {
    // Write data to the page
    Serial.print(F("Writing data into page ")); Serial.print(page);
    Serial.println(F(" ..."));
    dump_byte_array(dataBlock + (page * 4), 4); Serial.println();
    status = (MFRC522::StatusCode) mfrc522.MIFARE_Ultralight_Write(page, dataBlock + (page * 4), 4);
    if (status != MFRC522::STATUS_OK) {
      Serial.print(F("MIFARE_Write() failed: "));
      Serial.println(mfrc522.GetStatusCodeName(status));
      Serial.println("Write process failed, please try once more.");
      Serial.println("Your tag is still fine, just remove it and put back again in 3 seconds.");
      delay(1000);
      Serial.println();
      Serial.print("New attempt in 3...");
      delay(1000);
      Serial.print("2...");
      delay(1000);
      Serial.print("1...");
      delay(1000);
      Serial.println();
      Serial.println();
      Serial.println("Ready to write.");
      return;
    }
    Serial.println();
  }

  // Write lock bytes - the last thing you should do.
  // If you write them too early - your tag is wasted.
  // Write the Dynamic Lock Bytes
  byte DynamicLockBlock[]    = {
    0x01, 0x00, 0x0F, 0xBD
  };
  Serial.print(F("Writing Dynamic Lock Bytes into page 130"));
  Serial.println(F(" ..."));
  dump_byte_array(DynamicLockBlock, 4); Serial.println();
  status = (MFRC522::StatusCode) mfrc522.MIFARE_Ultralight_Write(130, DynamicLockBlock, 4);
  if (status != MFRC522::STATUS_OK) {
    Serial.print(F("MIFARE_Write() failed: "));
    Serial.println(mfrc522.GetStatusCodeName(status));
  }
  Serial.println();

  // Now we can write Static Lock Bytes
  byte StaticLockBlock[]    = {
    0x0F, 0xE0, 0x0F, 0xE0
  };
  Serial.print(F("Writing Static Lock Bytes into page 2"));
  Serial.println(F(" ..."));
  dump_byte_array(StaticLockBlock, 4); Serial.println();
  status = (MFRC522::StatusCode) mfrc522.MIFARE_Ultralight_Write(2, StaticLockBlock, 4);
  if (status != MFRC522::STATUS_OK) {
    Serial.print(F("MIFARE_Write() failed: "));
    Serial.println(mfrc522.GetStatusCodeName(status));
  }
  Serial.println();

  // Halt PICC
  mfrc522.PICC_HaltA();
  // Stop encryption on PCD
  mfrc522.PCD_StopCrypto1();

  Serial.println("Write process finished! Now please take your Amiibo card away!");
  delay(30000);
}

/**
   Helper routine to dump a byte array as hex values to Serial.
*/
void dump_byte_array(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], HEX);
  }
}
